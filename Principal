fun Principal() {
    val listaPerfiles = mutableListOf<PerfilUsuario>()

    // Perfiles precargados (ejemplo)
    listaPerfiles.add(
        PerfilUsuario(
            ID = 1,
            nombres = "Juan",
            apellidos = "Pérez",
            urlPhoto = "https://ejemplo.com/juan.jpg",
            edad = 30,
            correo = "juan@example.com",
            biografía = "Amante de la naturaleza y los deportes.",
            estado = "Activo"
        )
    )
    listaPerfiles.add(
        PerfilUsuario(
            ID = 2,
            nombres = "María",
            apellidos = "Gómez",
            urlPhoto = null,
            edad = 25,
            correo = "maria@example.com",
            biografía = null,
            estado = "Inactivo"
        )
    )

    while (true) {
        println("------ Menú ------")
        println("1. Crear perfil")
        println("2. Buscar perfil de usuario(s)")
        println("3. Eliminar perfil")
        println("4. Agregar Hobby")
        println("5. Salir")
        print("Elija una opción: ")

        when (readLine()?.toIntOrNull()) {
            1 -> {
                crearPerfil(listaPerfiles)
            }
            2 -> {
                buscarPerfil(listaPerfiles)
            }
            3 -> {
                eliminarPerfil(listaPerfiles)
            }
            4 -> {
                agregarHobby(listaPerfiles)
            }
            5 -> {
                println("Hasta luego!")
                return
            }
            else -> {
                println("Opción no válida, por favor intente de nuevo.")
            }
        }
    }
}

fun crearPerfil(listaPerfiles: MutableList<PerfilUsuario>) {
    try {
        println("------ Crear perfil ------")
        print("ID: ")
        val id = readLine()?.toIntOrNull() ?: throw IllegalArgumentException("ID inválido")

        print("Nombres: ")
        val nombres = readLine() ?: throw IllegalArgumentException("Nombre inválido")

        print("Apellidos: ")
        val apellidos = readLine() ?: throw IllegalArgumentException("Apellidos inválidos")

        print("URL de foto de perfil (opcional): ")
        val urlPhoto = readLine()

        print("Edad: ")
        val edad = readLine()?.toIntOrNull() ?: throw IllegalArgumentException("Edad inválida")

        print("Correo electrónico: ")
        val correo = readLine() ?: throw IllegalArgumentException("Correo inválido")

        print("Biografía (opcional): ")
        val biografía = readLine()

        print("Estado (Activo/Pendiente/Inactivo): ")
        val estado = readLine() ?: throw IllegalArgumentException("Estado inválido")

        listaPerfiles.add(
            PerfilUsuario(
                ID = id,
                nombres = nombres,
                apellidos = apellidos,
                urlPhoto = urlPhoto,
                edad = edad,
                correo = correo,
                biografía = biografía,
                estado = estado
            )
        )

        println("Perfil creado exitosamente.")
    } catch (e: Exception) {
        println("Error al crear el perfil: ${e.message}")
    }
}

fun buscarPerfil(listaPerfiles: MutableList<PerfilUsuario>) {
    println("------ Buscar perfil de usuario(s) ------")
    print("Ingrese el ID o los nombres y/o apellidos del perfil: ")
    val searchString = readLine() ?: ""

    val resultados = listaPerfiles.filter { perfil ->
        perfil.ID.toString() == searchString || perfil.nombres.contains(
            searchString,
            ignoreCase = true
        ) || perfil.apellidos.contains(searchString, ignoreCase = true)
    }

    if (resultados.isNotEmpty()) {
        println("Resultados encontrados:")
        resultados.forEach { perfil ->
            perfil.mostrarInformación()
            println()
        }
    } else {
        println("No se encontraron resultados para la búsqueda.")
    }
}

fun eliminarPerfil(listaPerfiles: MutableList<PerfilUsuario>) {
    try {
        println("------ Eliminar perfil ------")
        print("Ingrese el ID del perfil a eliminar: ")
        val id = readLine()?.toIntOrNull() ?: throw IllegalArgumentException("ID inválido")

        val perfil = listaPerfiles.find { it.ID == id }
        if (perfil != null) {
            listaPerfiles.remove(perfil)
            println("Perfil eliminado exitosamente.")
        } else {
            println("No se encontró un perfil con el ID proporcionado.")
        }
    } catch (e: Exception) {
        println("Error al eliminar el perfil: ${e.message}")
    }
}

fun agregarHobby(listaPerfiles: MutableList<PerfilUsuario>) {
    try {
        println("------ Agregar Hobby ------")
        print("Ingrese el ID o los nombres y/o apellidos del perfil al que desea agregar el hobby: ")
        val searchString = readLine() ?: ""

        val perfil = listaPerfiles.find { perfil ->
            perfil.ID.toString() == searchString || perfil.nombres.contains(
                searchString,
                ignoreCase = true
            ) || perfil.apellidos.contains(searchString, ignoreCase = true)
        }

        if (perfil != null) {
            println("Perfil encontrado:")
            perfil.mostrarInformación()

            print("Título del hobby: ")
            val título = readLine() ?: throw IllegalArgumentException("Título inválido")

            print("Descripción del hobby: ")
            val descripción = readLine() ?: throw IllegalArgumentException("Descripción inválida")

            print("URL de foto del hobby (opcional): ")
            val urlPhoto = readLine()

            perfil.agregarHobby(Hobby(título, descripción, urlPhoto))
            println("Hobby agregado exitosamente.")
        } else {
            println("No se encontró un perfil con el ID o nombres y/o apellidos proporcionados.")
        }
    } catch (e: Exception) {
        println("Error al agregar el hobby: ${e.message}")
    }
}
